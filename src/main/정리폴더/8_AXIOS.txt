[ AXIOS ] : 비동기 통신
    - 대표적인 비동기 통신 함수 : Fetch(JS내장함수) vs axios vs ajax(JQUERY)
    특징
        - *JSON 타입으로 자동 변환*
    1. 설치 (각 환경 다르다)
        JS(CDN) : <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        react(npm) : ~
    2. 문법
        axios.HTTP메소드명( '통신할HTTP주소' , {body} , {option} )
            1. HTTP메소드명 : axios.post() , axios.get() , axios.put() , axios.delete()
            2. 통신할HTTP주소 : 스프링환경에서는 RestController 에서 정의한 매핑 주소
                1. [내부서버] 스프링 환경에서는 RestController 에서 정의한 매핑 주소
                @GetMapping("/day04/student")  ----> '/day04/student'
                2. [외부서버] https:// ~~~
            3. body : 보낼 자료/데이터 객체{}
                * post , put method 가 데이터 보낼때 body 사용 * get, delete : body 사용하지 않는다.
            4. option : HTTP header 설정
                * 기본값은 content-type : 'application/json'
                1. {headers : {Content-Type : 'application/json'} }         * 기본값
                2. {headers : {Content-Type : 'multipart/form-data'} }      * FORM 첨부파일 전송

    3. 관례적인 유형들 : 여러개 통신을 순차처리 할 경우에는 주로 동기화 , 여러개 통신을 동시처리 할 경우에는 주로 비동기화
        1. 비동기 유형1
        ( ) = > {
            axios.post( '' , {} , {} )
                .then( response => { console.log( response.data) } )
                .catch( e => { console.log( e ); }
        }

        2. 동기 유형2
        async ( ) => {
            await axios.post( '' , {} , {} )
                .then( response => { console.log( response.data)} )
                .catch( e => { console.log( e ); }
        }

        3. 동기 유형3
        async ( ) => {
            try{
                const response = await axios.post( '' , {} , {} )
                console.log( response.data );
            }catch( e ){ console.log(e);}
        }

    4. CORS policy (Cross Origin Resource Sharing 정책)
        1. 정의 : 브라우저에서 다른 도메인(HTTP 주소)의 리소스(자료)를 요청할때 발생하는 보안 정책
        2. 2009년 표준화된 보안 정책 SOP(Same-Origin- Policy) , 동일한 도메인 끼리 리소스를 허용한다. 
        3. 방법 
            [문제점]
            - JS(localhost:8080) -----> spring (localhost:8080) : 도메인 같으므로 문제 없다.
            - react (localhost:8080) -----> spring (localhost:8080) : 서로 다른 도메인이므로 문제 있다.
            [해결방안] : 서로 다른 도메인 간의 리소스 공유 허용 . CORS 사용
                (1) 스프링 서버 허용 방법
                Controller 클래스 위에 @CrossOrigin("허용할 도메인 주소")
                    -> CrossOrigin("httpL//localhost:5173") : 해당 클래스는 리액트 서버를 (통신) 허용한다.

    * 도메인이란 ? 
        http://192.168.40.27:8080   : ip주소(숫자)
        http://www.naver.com        : ip주소(숫자-->문자) DNS(도메인 네임 서비스)
            -> 우편번호(숫자) , ----> 도로명 주소(문자)
        
